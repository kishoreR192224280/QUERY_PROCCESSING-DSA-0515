# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OLCYkpv4G1z39ZlxihI5Ga1N9EYj55yc
"""

import nltk
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Extensive dataset of queries and their categories
queries = [
      "Turn on the lights", "Turn off the fan", "Dim the lights", "Open the curtains",
      "Close the windows", "Lock the door", "Unlock the door", "Turn on the AC",
      "Increase the AC temperature", "Decrease the AC temperature", "Play some music",
      "Stop the music", "Next song", "Previous song", "Pause the music", "Resume the music",
      "Set an alarm for 6 AM", "Set an alarm for 7 PM", "Cancel all alarms",
      "What's the weather like?", "Is it raining outside?", "Will it snow today?",
      "Show me the weather forecast", "Tell me the temperature", "What is the humidity level?",
      "What’s the time now?", "Tell me the current time", "What time is it?",
      "Show me the news", "Tell me the latest headlines", "Give me technology news",
      "What's in sports news today?", "Play the daily news briefing", "Stop the news",
      "Turn up the volume", "Turn down the volume", "Mute the sound", "Unmute the sound",
      "Increase the brightness", "Decrease the brightness", "Set brightness to maximum",
      "Set brightness to minimum", "Show me my schedule", "What’s on my calendar?",
      "Add an event to my calendar", "Delete my calendar event", "What are my tasks?",
      "Mark this task as complete", "Add a new task", "Delete this task",
] * 5  # Replicating to create a larger dataset

categories = [
      "Home Automation", "Home Automation", "Home Automation", "Home Automation",
      "Home Automation", "Home Automation", "Home Automation", "Home Automation",
      "Home Automation", "Home Automation", "Entertainment", "Entertainment",
      "Entertainment", "Entertainment", "Entertainment", "Entertainment",
      "Alarm Setting", "Alarm Setting", "Alarm Setting", "Weather Query",
      "Weather Query", "Weather Query", "Weather Query", "Weather Query",
      "Weather Query", "Time Query", "Time Query", "Time Query", "News Query",
      "News Query", "News Query", "News Query", "News Query", "News Query",
      "Entertainment", "Entertainment", "Entertainment", "Entertainment",
      "Home Automation", "Home Automation", "Home Automation", "Home Automation",
      "Personal Assistant", "Personal Assistant", "Personal Assistant",
      "Personal Assistant", "Personal Assistant", "Personal Assistant",
      "Personal Assistant", "Personal Assistant",
] * 5  # Matching categories

# Preprocessing
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(queries)
y = categories

  # Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

  # Train a Naive Bayes Classifier
model = MultinomialNB()
model.fit(X_train, y_train)

  # Test the model
y_pred = model.predict(X_test)

# Output results
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

# Real-time query classification simulation
def classify_query(query):
    query_vec = vectorizer.transform([query])
    prediction = model.predict(query_vec)
    return prediction[0]

# Simulate Raspberry Pi Deployment
sample_query = "Set an alarm for tomorrow morning"
print(f"Input Query: {sample_query}")
print(f"Predicted Category: {classify_query(sample_query)}")